void bresenham(int x1,int y1,int x2,int y2,CDC* pDC)
{
	int dx,dy,p,dy2,dx2,dydx,x,y;
	float m=float(y2-y1)/(x2-x1);

	dx= abs(x2-x1);
	dy= abs(y2-y1);
	
	//case 1 : 0<=m<=1
	if(m>=0 && m<=1)
	{	p=(2*dy)-dx;
		dy2=2*dy;
		dydx=2*(dy-dx);
		x=x1;y=y1;

		pDC->SetPixel(x,y,RGB(0,0,0));
		while(x<x2)
		{
			x++;
			if(p<0)
			{	p+=dy2;	}
			else 
			{	y++; p+=dydx;	}

			pDC->SetPixel(x,y,RGB(0,0,0));
		}
	}
	//case 2 : m>1
	else if(m>1)
	{
		p=(2*dx)-dy;
		dx2=2*dx;
		dydx=2*(dx-dy);
		x=x1;y=y1;

		pDC->SetPixel(x,y,RGB(0,0,0));		
		while(y<y2)
		{
			y++;
			if(p<0) 
			{	p+=dx2; 
			}
			else
			{	x++; p+=dydx;
			}

			pDC->SetPixel(x,y,RGB(0,0,0));		
		}
	}
	// case 3 : -1<=m<=0
	else if(m<=0 && m>=-1)
	{	
		p=(2*dy)-dx;
		dy2=2*dy;
		dydx=2*(dy-dx);
		x=x1;
		y=y1;
		
		pDC->SetPixel(x,y,RGB(0,0,0));
		while(x<x2)
		{
			x++;
			if(p<0)
			{	p+=dy2;	}
			else 
			{	y--; p+=dydx;	}

			pDC->SetPixel(x,y,RGB(0,0,0));
		}
	}
	//case 4 : m<-1
	else 
	{
		p=(2*dx)-dy;
		dx2=2*dx;
		dydx=2*(dx-dy);
		x=x1;y=y1;

		pDC->SetPixel(x,y,RGB(0,0,0));		
		while(y>y2)
		{
			y--;
			if(p<0) 
			{	p+=dx2; 
			}
			else
			{	x++; p+=dydx;
			}

			pDC->SetPixel(x,y,RGB(0,0,0));		
		}
	}
}